Import necessary libraries for computer vision, numerical operations, RealSense camera, YOLO model, GPIO control, serial communication, and time management. Then, the YOLOv8 model is loaded for object detection. Defining GPIO output pins and grouping them into specific sets for different control logic. Defining lists of stationary and semi-stationary objects for classification purposes. Initializing a serial connection to communicate with the LiDAR sensor then setting up GPIO pins for output and initializing them to a LOW state, and defining the camera matrix and distortion coefficients for camera calibration. Then, Set the object size at the reference distance. Initializing video capture for the camera. Start the RealSense pipeline and configure it to capture depth and color streams. Then Initializing the depth scale for the RealSense camera which will help in measuring distance through camera. Entering in an infinite loop to continuously read frames from the camera and get the frame dimensions. Performing object detection on the current frame using the YOLO model and getting the frames from the RealSense pipeline. Check if depth and color frames are available; if not, continue to the next iterationâ€”Initialize variables to store the nearest object's label and its minimum distance. Then, the distance will be calculated using data from the  LiDAR sensor. Iterate over detected objects and get the bounding box coordinates and object label. Calculate the distance of the detected object using the depth frame. Then, update the nearest object and its distance if the current object is closer. Then, Reset all GPIO pins to a LOW state. Set specific GPIO pins to HIGH based on the nearest object detected. If the LiDAR distance is less than 15 units which is 0.5 meters, set all GPIO pins to HIGH. Draw the object label and its distance on the frame. Draw the bounding box around the detected object with a color indicating its distance and print the nearest object's label and its distance. Then display the frame with detected objects and distance information. Exit the loop if the user presses the 'q' key. Release the video capture and destroy all OpenCV windows when exiting the loop.